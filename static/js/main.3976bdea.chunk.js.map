{"version":3,"sources":["components/Header.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","isDarkMode","setIsDarkMode","classes","AppBar","position","Toolbar","Typography","className","Paper","title","Switch","checked","onChange","MyRadio","props","label","otherProps","useField","field","FormControlLabel","control","Radio","MyTextField","placeholder","meta","errorText","error","touched","TextField","helperText","autoComplete","validationSchema","yup","firstName","required","max","pets","of","name","App","useState","theme","createMuiTheme","palette","type","primary","blue","secondary","ThemeProvider","elevation","square","style","height","Grid","container","direction","item","xs","sm","margin","initialValues","lastName","isTall","cookies","yoghurt","id","Math","random","onSubmit","data","setSubmitting","resetForm","console","log","values","errors","isSubmitting","handleChange","handleBlur","handleSubmit","as","Checkbox","value","arrayHelpers","Button","onClick","push","variant","color","size","map","pet","index","key","Select","MenuItem","remove","paddingTop","disabled","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mbAKMA,EAAYC,aAAW,iBAAO,CAClCC,iBAAkB,CAChBC,KAAM,OA6BKC,EApBiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACvCC,EAAUP,IAChB,OACE,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQL,kBAA/B,wBAGA,kBAACW,EAAA,EAAD,CAAOC,MAAM,uCACX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACEC,QAASX,EACTY,SAAU,kBAAMX,GAAeD,S,kBCKnCa,EAAkC,SAACC,GAAW,IAC1CC,EAAyBD,EAAzBC,MAAUC,EAD+B,YAChBF,EADgB,aAEjCG,YAAaD,GAAtBE,EAF0C,oBAIjD,OAAO,kBAACC,EAAA,EAAD,iBAAsBD,EAAtB,CAA6BE,QAAS,kBAACC,EAAA,EAAD,MAAWN,MAAOA,MAG3DO,EAA6C,SAAC,GAG7C,IAFLC,EAEI,EAFJA,YACGT,EACC,iCACkBG,YAAaH,GAD/B,mBACGI,EADH,KACUM,EADV,KAEEC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAACE,EAAA,EAAD,eACEL,YAAaA,GACTL,EAFN,CAGEW,WAAYJ,EACZK,aAAa,MACbJ,QAASD,MAKTM,EAAmBC,IAAW,CAClCC,UAAWD,MAAaE,WAAWC,IAAI,IACvCC,KAAMJ,MAAYK,GAChBL,IAAW,CACTM,KAAMN,MAAaE,gBAmOVK,EA9NO,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACnBxC,EADmB,KACPC,EADO,KAGpBwC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM5C,EAAa,OAAS,QAE5B6C,QAASC,IACTC,UAAWD,OAIf,OACE,kBAACE,EAAA,EAAD,CAAeP,MAAOA,GACpB,kBAACjC,EAAA,EAAD,CAAOyC,UAAW,EAAGC,QAAM,EAACC,MAAO,CAAEC,OAAQ,SAC3C,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UACxB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACR,kBAAC,EAAD,CAAQxD,WAAYA,EAAYC,cAAeA,KAEjD,kBAACoD,EAAA,EAAD,CAAMG,MAAI,EAACF,WAAS,GAClB,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAI,EAAOC,GAAI,IAC1B,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,yBAAKP,MAAO,CAAEQ,OAAQ,KACpB,kBAAC,IAAD,CACEC,cAAe,CACb3B,UAAW,GACX4B,SAAU,GACVC,QAAQ,EACRC,QAAS,GACTC,QAAS,GACT5B,KAAM,CAAC,CAAEQ,KAAM,MAAON,KAAM,SAAU2B,GAAIC,KAAKC,YAEjDpC,iBAAkBA,EAUlBqC,SAAU,SAACC,EAAD,GAAyC,IAAhCC,EAA+B,EAA/BA,cAA+B,EAAhBC,UAChCD,GAAc,GAGdE,QAAQC,IAAI,SAAUJ,GAEtBC,GAAc,MAGf,gBACCI,EADD,EACCA,OACAC,EAFD,EAECA,OACAC,EAHD,EAGCA,aAHD,EAICC,aAJD,EAKCC,WALD,EAMCC,aAND,OASC,kBAAC,IAAD,KAqBE,kBAAC,EAAD,CACExD,YAAY,aACZe,KAAK,YACLM,KAAK,UAEP,6BAOE,kBAAC,EAAD,CACErB,YAAY,YACZe,KAAK,WACLM,KAAK,WAGT,kBAAC,IAAD,CAAON,KAAK,SAASM,KAAK,WAAWoC,GAAIC,MAEzC,yCAEA,kBAAC,IAAD,CACE3C,KAAK,UACL4C,MAAM,iBACNtC,KAAK,WACLoC,GAAIC,MAEN,kBAAC,IAAD,CACE3C,KAAK,UACL4C,MAAM,gBACNtC,KAAK,WACLoC,GAAIC,MAEN,kBAAC,IAAD,CACE3C,KAAK,UACL4C,MAAM,QACNtC,KAAK,WACLoC,GAAIC,MAGN,yCAKA,kBAAC,EAAD,CACE3C,KAAK,UACLM,KAAK,QACLsC,MAAM,QACNnE,MAAM,UAER,kBAAC,EAAD,CACEuB,KAAK,UACLM,KAAK,QACLsC,MAAM,YACNnE,MAAM,cAER,kBAAC,EAAD,CACEuB,KAAK,UACLM,KAAK,QACLsC,MAAM,QACNnE,MAAM,UAGR,kBAAC,IAAD,CAAYuB,KAAK,SACd,SAAC6C,GAAD,OACC,6BACE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBACPF,EAAaG,KAAK,CAChB1C,KAAM,OACNN,KAAM,GACN2B,GAAI,GAAKC,KAAKC,YAGlBoB,QAAQ,WACRC,MAAM,YACNC,KAAK,SAVP,WAcCf,EAAOtC,KAAKsD,KAAI,SAACC,EAAKC,GACrB,IAAMtD,EAAI,eAAWsD,EAAX,SAEV,OACE,yBAAKC,IAAKF,EAAI1B,IACZ,kBAAC,EAAD,CACE1C,YAAY,WACZe,KAAMA,IAGR,kBAAC,IAAD,CACEA,KAAI,eAAUsD,EAAV,SACJhD,KAAK,SACLoC,GAAIc,KAEJ,kBAACC,EAAA,EAAD,CAAUb,MAAM,OAAhB,OACA,kBAACa,EAAA,EAAD,CAAUb,MAAM,OAAhB,OACA,kBAACa,EAAA,EAAD,CAAUb,MAAM,QAAhB,SAEF,kBAACE,EAAA,EAAD,CACEC,QAAS,kBAAMF,EAAaa,OAAOJ,IACnCL,QAAQ,WACRC,MAAM,YACNC,KAAK,SAJP,aAeZ,yBAAKtC,MAAO,CAAE8C,WAAY,KACxB,kBAACb,EAAA,EAAD,CACEc,SAAUtB,EACVhC,KAAK,SACL2C,QAAQ,YACRC,MAAM,WAJR,WASF,6BAAMW,KAAKC,UAAU1B,EAAQ,KAAM,IACnC,6BAAMyB,KAAKC,UAAUzB,EAAQ,KAAM,UAM7C,kBAACtB,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAI,EAAOC,GAAI,SC7QtC2C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3976bdea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, Switch, Paper } from \"@material-ui/core\";\r\nimport HighlightIcon from \"@material-ui/icons/HighlightOutlined\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  typographyStyles: {\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isDarkMode: boolean;\r\n  setIsDarkMode: Function;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ isDarkMode, setIsDarkMode }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.typographyStyles}>\r\n          Material UI Formik 2\r\n        </Typography>\r\n        <Paper title=\"use this switch for dark/light mode\">\r\n          <HighlightIcon />\r\n        </Paper>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={() => setIsDarkMode(!isDarkMode)}\r\n        />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\nimport {\n  Formik,\n  Field,\n  Form,\n  useField,\n  FieldAttributes,\n  FieldArray,\n} from \"formik\";\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Radio,\n  FormControlLabel,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\n\nimport { Paper, Grid, ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport Header from \"./components/Header\";\nimport * as yup from \"yup\";\n\nimport { blue } from \"@material-ui/core/colors\";\n\ntype MyRadioProps = { label: string } & FieldAttributes<{}>;\n\n// Does not work in pre-Chromium MS Edge\n// const MyRadio: React.FC<MyRadioProps> = ({ label, ...props }) => {\n//   const [field] = useField<{}>(props);\n\n//   return <FormControlLabel {...field} control={<Radio />} label={label} />;\n// };\n\nconst MyRadio: React.FC<MyRadioProps> = (props) => {\n  const { label, ...otherProps } = props;\n  const [field] = useField<{}>(otherProps);\n\n  return <FormControlLabel {...field} control={<Radio />} label={label} />;\n};\n\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\n  placeholder,\n  ...props\n}) => {\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      placeholder={placeholder}\n      {...field}\n      helperText={errorText}\n      autoComplete=\"off\"\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  firstName: yup.string().required().max(10),\n  pets: yup.array().of(\n    yup.object({\n      name: yup.string().required(),\n    })\n  ),\n});\n\nconst App: React.FC = () => {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: isDarkMode ? \"dark\" : \"light\",\n\n      primary: blue,\n      secondary: blue,\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper elevation={0} square style={{ height: \"100%\" }}>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />\n          </Grid>\n          <Grid item container>\n            <Grid item xs={false} sm={1} />\n            <Grid item xs={12} sm={10}>\n              <div style={{ margin: 30 }}>\n                <Formik\n                  initialValues={{\n                    firstName: \"\",\n                    lastName: \"\",\n                    isTall: false,\n                    cookies: [],\n                    yoghurt: \"\",\n                    pets: [{ type: \"cat\", name: \"jarvis\", id: Math.random() }],\n                  }}\n                  validationSchema={validationSchema}\n                  // validate={(values) => {\n                  //   const errors: Record<string, string> = {};\n\n                  //   if (values.firstName.includes(\"bob\")) {\n                  //     errors.firstName = \"No bob\";\n                  //   }\n\n                  //   return errors;\n                  // }}\n                  onSubmit={(data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    // Make async call\n                    console.log(\"submit\", data);\n\n                    setSubmitting(false);\n                  }}\n                >\n                  {({\n                    values,\n                    errors,\n                    isSubmitting,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                  }) => (\n                    // <form onSubmit={handleSubmit}></form>\n                    <Form>\n                      {/* <TextField\n              name=\"firstName\"\n              value={values.firstName}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            /> */}\n                      {/* <div>\n              <TextField\n                name=\"lastName\"\n                value={values.lastName}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n            </div> */}\n                      {/* <Field\n              placeholder=\"first name\"\n              name=\"firstName\"\n              type=\"input\"\n              as={TextField}\n            /> */}\n                      <MyTextField\n                        placeholder=\"first name\"\n                        name=\"firstName\"\n                        type=\"input\"\n                      />\n                      <div>\n                        {/* <Field\n                placeholder=\"last name\"\n                name=\"lastName\"\n                type=\"input\"\n                as={TextField}\n              /> */}\n                        <MyTextField\n                          placeholder=\"last name\"\n                          name=\"lastName\"\n                          type=\"input\"\n                        />\n                      </div>\n                      <Field name=\"isTall\" type=\"checkbox\" as={Checkbox} />\n\n                      <div>cookies:</div>\n\n                      <Field\n                        name=\"cookies\"\n                        value=\"chocolate chip\"\n                        type=\"checkbox\"\n                        as={Checkbox}\n                      />\n                      <Field\n                        name=\"cookies\"\n                        value=\"snickerdoodle\"\n                        type=\"checkbox\"\n                        as={Checkbox}\n                      />\n                      <Field\n                        name=\"cookies\"\n                        value=\"sugar\"\n                        type=\"checkbox\"\n                        as={Checkbox}\n                      />\n\n                      <div>yoghurt:</div>\n                      {/* <Field name=\"yoghurt\" value=\"peach\" type=\"radio\" as={Radio} />\n            <Field name=\"yoghurt\" value=\"blueberry\" type=\"radio\" as={Radio} />\n            <Field name=\"yoghurt\" value=\"apple\" type=\"radio\" as={Radio} /> */}\n\n                      <MyRadio\n                        name=\"yoghurt\"\n                        type=\"radio\"\n                        value=\"peach\"\n                        label=\"peach\"\n                      />\n                      <MyRadio\n                        name=\"yoghurt\"\n                        type=\"radio\"\n                        value=\"blueberry\"\n                        label=\"blueberry\"\n                      />\n                      <MyRadio\n                        name=\"yoghurt\"\n                        type=\"radio\"\n                        value=\"apple\"\n                        label=\"apple\"\n                      />\n\n                      <FieldArray name=\"pets\">\n                        {(arrayHelpers) => (\n                          <div>\n                            <Button\n                              onClick={() =>\n                                arrayHelpers.push({\n                                  type: \"frog\",\n                                  name: \"\",\n                                  id: \"\" + Math.random(),\n                                })\n                              }\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              size=\"small\"\n                            >\n                              add pet\n                            </Button>\n                            {values.pets.map((pet, index) => {\n                              const name = `pets.${index}.name`;\n\n                              return (\n                                <div key={pet.id}>\n                                  <MyTextField\n                                    placeholder=\"pet name\"\n                                    name={name}\n                                  />\n\n                                  <Field\n                                    name={`pets.${index}.type`}\n                                    type=\"select\"\n                                    as={Select}\n                                  >\n                                    <MenuItem value=\"cat\">cat</MenuItem>\n                                    <MenuItem value=\"dog\">dog</MenuItem>\n                                    <MenuItem value=\"frog\">frog</MenuItem>\n                                  </Field>\n                                  <Button\n                                    onClick={() => arrayHelpers.remove(index)}\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    size=\"small\"\n                                  >\n                                    x\n                                  </Button>\n                                </div>\n                              );\n                            })}\n                          </div>\n                        )}\n                      </FieldArray>\n\n                      <div style={{ paddingTop: 30 }}>\n                        <Button\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                          variant=\"contained\"\n                          color=\"primary\"\n                        >\n                          submit\n                        </Button>\n                      </div>\n                      <pre>{JSON.stringify(values, null, 2)}</pre>\n                      <pre>{JSON.stringify(errors, null, 2)}</pre>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Grid>\n            <Grid item xs={false} sm={1} />\n          </Grid>\n        </Grid>\n      </Paper>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n//https://medium.com/@matwankarmalay/create-react-app-ie11-script1002-syntax-error-how-to-get-rid-of-it-d70000c53ddf\n// Also:\n// Delete node_modules/.cache folder\n// Clear IE11 Cache\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}