{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["MyRadio","label","props","useField","field","FormControlLabel","control","Radio","MyTextField","placeholder","meta","errorText","error","touched","TextField","helperText","autoComplete","validationSchema","yup","firstName","required","max","pets","of","name","App","initialValues","lastName","isTall","cookies","yoghurt","type","id","Math","random","onSubmit","data","setSubmitting","resetForm","console","log","values","errors","isSubmitting","handleChange","handleBlur","handleSubmit","as","Checkbox","value","arrayHelpers","Button","onClick","push","map","pet","index","key","Select","MenuItem","remove","disabled","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3b29d93d.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Formik,\n  Field,\n  Form,\n  useField,\n  FieldAttributes,\n  FieldArray,\n} from \"formik\";\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Radio,\n  FormControlLabel,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\n\nimport * as yup from \"yup\";\n\ntype MyRadioProps = { label: string } & FieldAttributes<{}>;\n\nconst MyRadio: React.FC<MyRadioProps> = ({ label, ...props }) => {\n  const [field] = useField<{}>(props);\n\n  return <FormControlLabel {...field} control={<Radio />} label={label} />;\n};\n\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\n  placeholder,\n  ...props\n}) => {\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      placeholder={placeholder}\n      {...field}\n      helperText={errorText}\n      autoComplete=\"off\"\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  firstName: yup.string().required().max(10),\n  pets: yup.array().of(\n    yup.object({\n      name: yup.string().required(),\n    })\n  ),\n});\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          isTall: false,\n          cookies: [],\n          yoghurt: \"\",\n          pets: [{ type: \"cat\", name: \"jarvis\", id: Math.random() }],\n        }}\n        validationSchema={validationSchema}\n        // validate={(values) => {\n        //   const errors: Record<string, string> = {};\n\n        //   if (values.firstName.includes(\"bob\")) {\n        //     errors.firstName = \"No bob\";\n        //   }\n\n        //   return errors;\n        // }}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n\n          // Make async call\n          console.log(\"submit\", data);\n\n          setSubmitting(false);\n        }}\n      >\n        {({\n          values,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          // <form onSubmit={handleSubmit}></form>\n          <Form>\n            {/* <TextField\n              name=\"firstName\"\n              value={values.firstName}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            /> */}\n            {/* <div>\n              <TextField\n                name=\"lastName\"\n                value={values.lastName}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n            </div> */}\n            {/* <Field\n              placeholder=\"first name\"\n              name=\"firstName\"\n              type=\"input\"\n              as={TextField}\n            /> */}\n            <MyTextField\n              placeholder=\"first name\"\n              name=\"firstName\"\n              type=\"input\"\n            />\n            <div>\n              {/* <Field\n                placeholder=\"last name\"\n                name=\"lastName\"\n                type=\"input\"\n                as={TextField}\n              /> */}\n              <MyTextField\n                placeholder=\"last name\"\n                name=\"lastName\"\n                type=\"input\"\n              />\n            </div>\n            <Field name=\"isTall\" type=\"checkbox\" as={Checkbox} />\n\n            <div>cookies:</div>\n\n            <Field\n              name=\"cookies\"\n              value=\"chocolate chip\"\n              type=\"checkbox\"\n              as={Checkbox}\n            />\n            <Field\n              name=\"cookies\"\n              value=\"snickerdoodle\"\n              type=\"checkbox\"\n              as={Checkbox}\n            />\n            <Field name=\"cookies\" value=\"sugar\" type=\"checkbox\" as={Checkbox} />\n\n            <div>yoghurt:</div>\n            {/* <Field name=\"yoghurt\" value=\"peach\" type=\"radio\" as={Radio} />\n            <Field name=\"yoghurt\" value=\"blueberry\" type=\"radio\" as={Radio} />\n            <Field name=\"yoghurt\" value=\"apple\" type=\"radio\" as={Radio} /> */}\n\n            <MyRadio name=\"yoghurt\" type=\"radio\" value=\"peach\" label=\"peach\" />\n            <MyRadio\n              name=\"yoghurt\"\n              type=\"radio\"\n              value=\"blueberry\"\n              label=\"blueberry\"\n            />\n            <MyRadio name=\"yoghurt\" type=\"radio\" value=\"apple\" label=\"apple\" />\n\n            <FieldArray name=\"pets\">\n              {(arrayHelpers) => (\n                <div>\n                  <Button\n                    onClick={() =>\n                      arrayHelpers.push({\n                        type: \"frog\",\n                        name: \"\",\n                        id: \"\" + Math.random(),\n                      })\n                    }\n                  >\n                    add pet\n                  </Button>\n                  {values.pets.map((pet, index) => {\n                    const name = `pets.${index}.name`;\n\n                    return (\n                      <div key={pet.id}>\n                        <MyTextField placeholder=\"pet name\" name={name} />\n\n                        <Field\n                          name={`pets.${index}.type`}\n                          type=\"select\"\n                          as={Select}\n                        >\n                          <MenuItem value=\"cat\">cat</MenuItem>\n                          <MenuItem value=\"dog\">dog</MenuItem>\n                          <MenuItem value=\"frog\">frog</MenuItem>\n                        </Field>\n                        <Button onClick={() => arrayHelpers.remove(index)}>\n                          x\n                        </Button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </FieldArray>\n\n            <div>\n              <Button disabled={isSubmitting} type=\"submit\">\n                submit\n              </Button>\n            </div>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n            <pre>{JSON.stringify(errors, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}